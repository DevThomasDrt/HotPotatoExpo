import { Alert, Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import mobileAds, { InterstitialAd, AdEventType, TestIds } from 'react-native-google-mobile-ads';

/**
 * Service de gestion des publicit√©s
 * Simule l'int√©gration avec des services de publicit√© comme AdMob
 */
class AdService {
  constructor() {
    this.isInitialized = false;
    this.interstitialAd = null;
    
    // IDs des unit√©s publicitaires
    this.adUnitIds = {
      interstitial: __DEV__ ? TestIds.INTERSTITIAL : 'ca-app-pub-5791149705686966/6876354715'
    };
    
    this.adFrequency = {
      interstitial: 2, // Afficher une pub toutes les 2 manches
      lastInterstitialRound: 0
    };
  }

  /**
   * Initialiser le service de publicit√©s
   */
  async initialize() {
    try {
      // Initialisation du service de publicit√©s AdMob
      
      // Initialiser le SDK Mobile Ads
      await mobileAds().initialize();
      
      // Cr√©er l'instance de publicit√© interstitielle
      this.interstitialAd = InterstitialAd.createForAdRequest(this.adUnitIds.interstitial);
      
      // Charger les pr√©f√©rences de publicit√©
      const lastAdRound = await AsyncStorage.getItem('lastAdRound');
      if (lastAdRound) {
        this.adFrequency.lastInterstitialRound = parseInt(lastAdRound);
      }
      
      this.isInitialized = true;
      // Service de publicit√©s AdMob initialis√© avec succ√®s
      return true;
    } catch (error) {
      console.error('Erreur lors de l\'initialisation des publicit√©s AdMob:', error);
      return false;
    }
  }

  /**
   * V√©rifier si une publicit√© interstitielle doit √™tre affich√©e
   * @param {number} currentRound - Manche actuelle
   * @returns {boolean}
   */
  shouldShowInterstitialAd(currentRound) {
    if (!this.isInitialized) return false;
    
    const roundsSinceLastAd = currentRound - this.adFrequency.lastInterstitialRound;
    return roundsSinceLastAd >= this.adFrequency.interstitial;
  }

  /**
   * Afficher une publicit√© interstitielle
   * @param {number} currentRound - Manche actuelle
   * @returns {Promise<boolean>} - True si la pub a √©t√© affich√©e
   */
  async showInterstitialAd(currentRound) {
    if (!this.shouldShowInterstitialAd(currentRound) || !this.interstitialAd) {
      return false;
    }

    try {
      // Chargement de la publicit√© interstitielle AdMob
      
      // Charger la publicit√©
      await this.interstitialAd.load();
      
      return new Promise((resolve) => {
        // √âcouter les √©v√©nements de la publicit√©
        const unsubscribe = this.interstitialAd.addAdEventListener(AdEventType.CLOSED, () => {
          // Publicit√© interstitielle ferm√©e
          // Enregistrer que la pub a √©t√© vue
          this.adFrequency.lastInterstitialRound = currentRound;
          AsyncStorage.setItem('lastAdRound', currentRound.toString());
          
          // Recr√©er l'instance pour la prochaine fois
          this.interstitialAd = InterstitialAd.createForAdRequest(this.adUnitIds.interstitial);
          
          unsubscribe();
          resolve(true);
        });
        
        // Afficher la publicit√©
        this.interstitialAd.show();
      });
    } catch (error) {
      console.error('Erreur lors de l\'affichage de la publicit√© AdMob:', error);
      // Fallback vers une alerte en cas d'erreur
      return this.showFallbackInterstitialAd(currentRound);
    }
  }
  
  /**
   * Afficher une publicit√© de fallback (simulation)
   * @param {number} currentRound - Manche actuelle
   * @returns {Promise<boolean>}
   */
  async showFallbackInterstitialAd(currentRound) {
    return new Promise((resolve) => {
      Alert.alert(
        'üì∫ Publicit√©',
        'Merci de regarder cette courte publicit√© pour soutenir le jeu !\n\nüéÆ Hot Potato - Le jeu le plus amusant !',
        [
          {
            text: 'Fermer (5s)',
            onPress: async () => {
              this.adFrequency.lastInterstitialRound = currentRound;
              await AsyncStorage.setItem('lastAdRound', currentRound.toString());
              // Publicit√© de fallback ferm√©e
              resolve(true);
            }
          }
        ],
        { cancelable: false }
      );
    });
  }

  /**
   * Afficher une publicit√© r√©compens√©e (d√©sactiv√©e)
   * @returns {Promise<boolean>} - Toujours false
   */
  async showRewardedAd() {
    // Publicit√©s r√©compens√©es d√©sactiv√©es
    return false;
  }

  /**
   * V√©rifier si les publicit√©s sont disponibles
   * @returns {boolean}
   */
  isAdAvailable() {
    return this.isInitialized;
  }

  /**
   * Obtenir les statistiques des publicit√©s
   * @returns {Object}
   */
  async getAdStats() {
    try {
      const lastAdRound = await AsyncStorage.getItem('lastAdRound');
      return {
        lastInterstitialRound: lastAdRound ? parseInt(lastAdRound) : 0,
        adFrequency: this.adFrequency.interstitial,
        isInitialized: this.isInitialized
      };
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des stats publicitaires:', error);
      return null;
    }
  }

  /**
   * Configurer la fr√©quence des publicit√©s
   * @param {number} frequency - Nombre de manches entre chaque pub
   */
  setAdFrequency(frequency) {
    if (frequency > 0) {
      this.adFrequency.interstitial = frequency;
      // Fr√©quence des publicit√©s mise √† jour
    }
  }

  /**
   * R√©initialiser les compteurs de publicit√©s
   */
  async resetAdCounters() {
    try {
      this.adFrequency.lastInterstitialRound = 0;
      await AsyncStorage.removeItem('lastAdRound');
      // Compteurs de publicit√©s r√©initialis√©s
    } catch (error) {
      console.error('Erreur lors de la r√©initialisation des compteurs:', error);
    }
  }
}

// Instance singleton
const adService = new AdService();

export default adService;